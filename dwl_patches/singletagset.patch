diff --git a/dwl.c b/dwl.c
index e6bb8c6..d7a6e55 100644
--- a/dwl.c
+++ b/dwl.c
@@ -245,6 +245,7 @@ static void arrange(Monitor *m);
 static void arrangelayer(Monitor *m, struct wl_list *list,
 		struct wlr_box *usable_area, int exclusive);
 static void arrangelayers(Monitor *m);
+static void attachclients(Monitor *m);
 static void autostartexec(void);
 static void axisnotify(struct wl_listener *listener, void *data);
 static void buttonpress(struct wl_listener *listener, void *data);
@@ -283,6 +284,7 @@ static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
 static Client *focustop(Monitor *m);
 static void fullscreennotify(struct wl_listener *listener, void *data);
+static size_t getunusedtag(void);
 static void handleconstraintcommit(struct wl_listener *listener, void *data);
 static void handlesig(int signo);
 static void incnmaster(const Arg *arg);
@@ -554,6 +556,15 @@ arrangelayer(Monitor *m, struct wl_list *list, struct wlr_box *usable_area, int
 	}
 }
 
+void
+attachclients(Monitor *m)
+{
+	Client *c;
+	wl_list_for_each(c, &clients, link)
+		if (c->tags & m->tagset[m->seltags])
+			setmon(c, m, c->tags);
+}
+
 void
 arrangelayers(Monitor *m)
 {
@@ -986,7 +997,7 @@ createmon(struct wl_listener *listener, void *data)
 	m->gappiv = gappiv;
 	m->gappoh = gappoh;
 	m->gappov = gappov;
-	m->tagset[0] = m->tagset[1] = 1;
+	m->tagset[0] = m->tagset[1] = (1<<getunusedtag()) & TAGMASK;
 	for (r = monrules; r < END(monrules); r++) {
 		if (!r->name || strstr(wlr_output->name, r->name)) {
 			m->mfact = r->mfact;
@@ -1498,6 +1509,22 @@ fullscreennotify(struct wl_listener *listener, void *data)
 	setfullscreen(c, client_wants_fullscreen(c));
 }
 
+size_t
+getunusedtag(void)
+{
+	size_t i = 0;
+	Monitor *m;
+	if (wl_list_empty(&mons))
+		return i;
+	for (i=0; i < TAGCOUNT; i++) {
+		wl_list_for_each(m, &mons, link) {
+			if (!(m->tagset[m->seltags] & (1<<i)))
+				return i;
+		}
+	}
+	return i;
+}
+
 void
 handlesig(int signo)
 {
@@ -2055,8 +2082,6 @@ printstatus(void)
 	wl_list_for_each(m, &mons, link) {
 		occ = urg = 0;
 		wl_list_for_each(c, &clients, link) {
-			if (c->mon != m)
-				continue;
 			occ |= c->tags;
 			if (c->isurgent)
 				urg |= c->tags;
@@ -2562,22 +2587,32 @@ startdrag(struct wl_listener *listener, void *data)
 void
 tag(const Arg *arg)
 {
+	Monitor *m;
 	Client *sel = focustop(selmon);
 	if (!sel || (arg->ui & TAGMASK) == 0)
 		return;
 
 	sel->tags = arg->ui & TAGMASK;
 	focusclient(focustop(selmon), 1);
-	arrange(selmon);
+	wl_list_for_each(m, &mons, link) {
+		attachclients(m);
+		arrange(m);
+	}
 	printstatus();
 }
 
 void
 tagmon(const Arg *arg)
 {
+	Monitor *m;
 	Client *sel = focustop(selmon);
-	if (sel)
+	if (sel) {
 		setmon(sel, dirtomon(arg->i), 0);
+		wl_list_for_each(m, &mons, link) {
+			arrange(m);
+		}
+		focusclient(focustop(sel->mon), 1);
+	}
 }
 
 void
@@ -2645,6 +2680,7 @@ togglefullscreen(const Arg *arg)
 void
 toggletag(const Arg *arg)
 {
+	Monitor *m;
 	uint32_t newtags;
 	Client *sel = focustop(selmon);
 	if (!sel)
@@ -2653,7 +2689,11 @@ toggletag(const Arg *arg)
 	if (!newtags)
 		return;
 
+	wl_list_for_each(m, &mons, link)
+		if (m !=selmon && newtags & m->tagset[m->seltags])
+			return;
 	sel->tags = newtags;
+	attachclients(selmon);
 	focusclient(focustop(selmon), 1);
 	arrange(selmon);
 	printstatus();
@@ -2662,12 +2702,17 @@ toggletag(const Arg *arg)
 void
 toggleview(const Arg *arg)
 {
+	Monitor *m;
 	uint32_t newtagset = selmon ? selmon->tagset[selmon->seltags] ^ (arg->ui & TAGMASK) : 0;
 
 	if (!newtagset)
 		return;
 
+	wl_list_for_each(m, &mons, link)
+		if (m !=selmon && newtagset & m->tagset[m->seltags])
+			return;
 	selmon->tagset[selmon->seltags] = newtagset;
+	attachclients(selmon);
 	focusclient(focustop(selmon), 1);
 	arrange(selmon);
 	printstatus();
@@ -2836,15 +2881,38 @@ urgent(struct wl_listener *listener, void *data)
 void
 view(const Arg *arg)
 {
+	Monitor *m, *origm = selmon;
+	unsigned int newtags = selmon->tagset[selmon->seltags ^ 1];
+
 	if (!selmon || (arg->ui & TAGMASK) == selmon->tagset[selmon->seltags]) {
 		view(&((Arg) { .ui = 0 }));
 		return;
 	}
-	selmon->seltags ^= 1; /* toggle sel tagset */
+
+	/* swap tags when trying to display a tag from another monitor */
 	if (arg->ui & TAGMASK)
-		selmon->tagset[selmon->seltags] = arg->ui & TAGMASK;
-	focusclient(focustop(selmon), 1);
-	arrange(selmon);
+		newtags = arg->ui & TAGMASK;
+	wl_list_for_each(m, &mons, link) {
+		if (m != selmon && newtags & m->tagset[m->seltags]) {
+			/* prevent displaying all tags (MODKEY-0) when multiple monitors
+			 * are connected */
+			if (newtags & selmon->tagset[selmon->seltags])
+				return;
+			m->seltags ^= 1;
+			m->tagset[m->seltags] = selmon->tagset[selmon->seltags];
+			attachclients(m);
+			focusclient(focustop(m), 1);
+			arrange(m);
+			break;
+		}
+	}
+
+	origm->seltags ^= 1; /* toggle sel tagset */
+	if (arg->ui & TAGMASK)
+		origm->tagset[origm->seltags] = arg->ui & TAGMASK;
+	attachclients(origm);
+	focusclient(focustop(origm), 1);
+	arrange(origm);
 	printstatus();
 }
 
