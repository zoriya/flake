diff --git a/dwl.c b/dwl.c
index 0841bef..b53cc14 100644
--- a/dwl.c
+++ b/dwl.c
@@ -322,6 +322,7 @@ static void updatetitle(struct wl_listener *listener, void *data);
 static void urgent(struct wl_listener *listener, void *data);
 static void view(const Arg *arg);
 static void virtualkeyboard(struct wl_listener *listener, void *data);
+static void warpcursor(const Client *c);
 static Monitor *xytomon(double x, double y);
 static void xytonode(double x, double y, struct wlr_surface **psurface,
 		Client **pc, LayerSurface **pl, double *nx, double *ny);
@@ -503,6 +504,9 @@ arrange(Monitor *m)
 
 	if (m->lt[m->sellt]->arrange)
 		m->lt[m->sellt]->arrange(m);
+	c = focustop(selmon);
+	if (cursor_warp && c)
+		warpcursor(c);
 	motionnotify(0);
 	checkidleinhibitor(NULL);
 }
@@ -1304,6 +1308,10 @@ focusclient(Client *c, int lift)
 	if (c && client_surface(c) == old)
 		return;
 
+	/* Warp cursor to center of client if it is outside */
+	if (cursor_warp && c)
+		warpcursor(c);
+
 	if ((old_client_type = toplevel_from_wlr_surface(old, &old_c, &old_l)) == XDGShell) {
 		struct wlr_xdg_popup *popup, *tmp;
 		wl_list_for_each_safe(popup, tmp, &old_c->surface.xdg->popups, link)
@@ -1372,6 +1380,12 @@ focusmon(const Arg *arg)
 			selmon = dirtomon(arg->i);
 		while (!selmon->wlr_output->enabled && i++ < nmons);
 	focusclient(focustop(selmon), 1);
+	if (cursor_warp) {
+		wlr_cursor_warp_closest(cursor,
+			  NULL,
+			  selmon->m.x + selmon->m.width / 2.0,
+			  selmon->m.y + selmon->m.height / 2.0);
+	}
 }
 
 void
@@ -2736,6 +2750,18 @@ virtualkeyboard(struct wl_listener *listener, void *data)
 	createkeyboard(&keyboard->keyboard);
 }
 
+void
+warpcursor(const Client *c) {
+	if (cursor->x < c->geom.x ||
+		cursor->x > c->geom.x + c->geom.width ||
+		cursor->y < c->geom.y ||
+		cursor->y > c->geom.y + c->geom.height)
+		wlr_cursor_warp_closest(cursor,
+			  NULL,
+			  c->geom.x + c->geom.width / 2.0,
+			  c->geom.y + c->geom.height / 2.0);
+}
+
 Monitor *
 xytomon(double x, double y)
 {
